entity Token {
	token UUID,
    creation Instant,
    expiration Instant,
    usageLimit Integer,
    currentUsage Integer required,
    renewable Boolean required
}

entity TokenStats {
	accessIp String,
    resource String,
    accessTime Instant required,
    usageCount Integer required
}

entity UserDetails {
	licenseType LicenseType,
    jobTitle String,
    companyName String,
    city String,
    country String,
    address String,
    additionalInfo TextBlob
}

entity UserMails {
	sentDate Instant required,
    sentBy String required,
    mailType String,
    sentFrom String required,
}

entity Company {
	name String required,
    description TextBlob,
    companyType CompanyType required,
    licenseType LicenseType required,
    licenseModel LicenseModel required,
    licenseStatus LicenseStatus required,
    businessContact String,
    legalContact String,
}

entity CompanyDomain {
	name String required
}

enum LicenseType {
	ACADEMIC,
    COMMERCIAL,
    RESEARCH_IN_COMMERCIAL,
    HOSPITAL
}

enum CompanyType {
	PARENT, BRANCH, UNKNOWN
}

enum LicenseStatus {
	TRIAL, REGULAR, TRIAL_EXPIRED, EXPIRED, UNKNOWN
}

enum LicenseModel {
	FULL, LIMITED
}

relationship OneToOne {
 	UserDetails to User
}

relationship ManyToOne {
	TokenStats{token} to Token
	Token{user} to User
	UserMails{user} to User
	UserDetails{company} to Company
}

relationship ManyToMany {
    Company{companyDomain} to CompanyDomain{company}
}

// Set pagination options
// paginate JobHistory, Employee with infinite-scroll
// paginate Job with pagination

// Use Data Transfer Objects (DTO)
dto all with mapstruct except Token, TokenStats

// Set service options to all except few
// service all with serviceImpl
service all with serviceImpl except UserMails
service UserMails with serviceClass

// Skip all client generation
// We do not use redux in the frontend, the autogenerated code is not so useful here
skipClient *
