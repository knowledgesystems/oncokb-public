/*------------------------------------*\
  MIXINS
\*------------------------------------*/


/* ----- Responsive ----- */

// Dynamic Media Queries

// 1st argument = breakpoint value
// 2nd argument (optional) = either 2nd breakpoint value or the word max to make it a max-width query
@mixin respond-to($val, $val2: none, $val3: all) {
  @if ($val2 == none) {
    @media #{$val3} and (min-width: $val) { @content; }

  } @else if ($val2 == max) {
    @media #{$val3}  and (max-width: $val) { @content; }

  } @else {
    @media #{$val3} and (min-width: $val) and (max-width: $val2) { @content; }
  }
}

/* Layout Mixins */

/*
  Two types content wrappers:
  Normal
  two wrappers. Outer sets max width and centers.
  Inner (relatively positioned) adds gutters for mobile.
  Full bleed Aspect Ratio (for hero)
  two wrappers. Outer is full browser width bleed.
  Inner (absolutely positioned) sets max-width and gutters.
  Heros use aspect-ratio mixin as well.
 */

@mixin full-bleed-content-wrapper {
  width: 100%;
}

@mixin full-bleed-content-inner {
  // This is recreating a basic layout container (without using bootstrap).

  // Set the maxiumum width of content and center that container.
  max-width: $content-max-width;
  margin: 0px auto;

  // Add side gutters for small/medium viewports.
  padding: 0px $content-gutter;
  @include breakpoint($content-max-width + $content-gutter + $content-gutter) {
    // Remove gutters once the width expands beyond the max content width plus the gutters.
    padding: 0px;
  }
}

@mixin main-content-wrapper {
  // Sets and centers the main content area
  max-width: $content-max-width;
  padding: 0px;
  margin: 0px auto;
}

@mixin main-content-inner {
  // Allows inner items to be absolutely positioned to this div.
  position:relative;
  padding-top: 0px;
  padding-bottom: 0px;
  @include parent-collapse-fix;

  @include horizontal-content-gutter;
}

/* Mobile content gutter */
@mixin horizontal-content-gutter {
  // Left and right gutters for mobile.
  padding-left: $content-gutter;
  padding-right: $content-gutter;
  @include respond-to($content-max-width + $content-gutter + $content-gutter + 17px) {
    // Remove gutters for desktop.
    padding-left: 0px;
    padding-right: 0px;
  }
}

/* Fix parent collapse */
@mixin parent-collapse-fix {
  // Applies similar effect as overflow: hidden; without hiding the overflow.
  // Wrapper div has height of inner floated content. Etc. To Do: add more explanation.
  width: 100%;
  clear: both;
  display: inline-block;
}

/* Aspect Ratio Mixin */
@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  &__inner,
  &-inner {
    position: absolute;
    top: 0px;
    left: 0px;
    right: 0px;
    bottom: 0px;
  }
}

@mixin full-width-layout-grid {
  $fw-col1: 366;
  $fw-col2: 575;
  $fw-col3: 159;
  $fw-total: $fw-col1 + $fw-col2 + $fw-col3;
  $fw-gutter: 50;


  @include add-grid($fw-col1/$fw-total $fw-col2/$fw-total $fw-col3/$fw-total);
  @include add-gutter($fw-gutter/$fw-total);

  // Increasing the 1st and 2nd columns a little bit can get us more rounded ratios.
  //@include add-grid(7 11 3);
  //@include add-gutter(0.8301886792);

  // opposite is default.
  //@include add-gutter-style('opposite');
}

/* ----- Line Clamp ----- */

@mixin line-clamp($line-clamp: 4, $line-height: 1.5, $text-background-color: #fff) {
  display: block;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  position: relative;

  line-height: $line-height;
  overflow: hidden;
  text-overflow: ellipsis;
  padding: 0px !important;

  -webkit-line-clamp : $line-clamp;
  height: (1em * $line-height * $line-clamp);

  // This fallback is not acceptable because it adds an ellipsis
  // *at all times* in non-webkit browsers.
  /*
  &:after {
    content: '...';
    text-align: right;
    bottom: 0px;
    right: 0px;
    width: 25%;
    display: block;
    position: absolute;
    height: 1em * $line-height;
    background: linear-gradient(to right, rgba($text-background-color, 0), rgba($text-background-color, 1) 75%);
  }
  @supports (-webkit-line-clamp: 1)
  {
    &:after
    {
      display : none !important;
    }
  }
  */
}

// Visually Hidden
// Quickly made this visually hidden, but still accessible mixin based on...
// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility

@mixin visually-hidden() {
  border: 0px;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0px;
  position: absolute;
  width: 1px;
}

/* ----- Typography ----- */

// Mixins for Rem Font Sizing
// Modified from: http://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/

// 1st argument = a multiple of our 10px base font size (ie. 1.3)
// 2nd argument (optional) = a property (font-size is the default)
@mixin rem($sizeValue, $property: font-size) {
  #{ $property } : ($sizeValue * 10) + px;
  #{ $property } : $sizeValue + rem;
}

@mixin text-shadow($color: $pure-black, $opacity: .25) {
  text-shadow: 1px 1px 2px rgba($color, $opacity);
}

/* ----- Misc ----- */

@mixin transition($property: all) {
  transition: $property 500ms ease-in-out;
  // Using browser hack to remove transitions for Safari only (#1244).
  _::-webkit-full-page-media, _:future, :root & {
    -webkit-transition-property: none !important;
    -webkit-transition-duration: 0 !important;
  }
}

@mixin square-bullet-list {
  margin: 0px;
  padding: $vertical-spacing $content-gutter;
  list-style: none;
  @include rem(1.4);
  line-height: 1.6;

  li {
    margin: 0px 0px $vertical-spacing-sm $content-gutter;
    position: relative;
    list-style: none;

    ul {
      margin: $vertical-spacing-sm 0px;
      padding-left: $content-gutter;

      li {
        font-size: .9em;
      }
    }

    @media print {
      list-style: disc;
    }

    &:before {
      @include rem(1.8);
      content: " ";
      width: 6px;
      height: 6px;
      background-color: $brand-accent;
      position: absolute;
      left: -$content-gutter;
      top: $vertical-spacing-sm;
      line-height: 1;

      .lt-ie9 & {
        // ie doesn't repaint psuedo content on url change
        background-color: #444 !important;
      }

      @each $segment in $segments {
        .#{ map-get($segment, segmentSlug) }-l & {
          background-color: map-get($segment, segmentAccent);
        }
      }
    }
  }
}

@mixin play-video-icon($size: 4) {
  opacity: .5;
  &:focus,
  &:hover {
    opacity:1;
  }
  position: relative;
  transition: all 300ms ease-in-out;
  &:before {
    @extend .fonticon;
    @extend .mskcc-icon-media;
    @include rem($size);
    color: $pure-white;
    padding:7px 5px 7px 10px;
    border-radius: 180px;
    margin: 0 auto;
    display: inline-block;
    width: auto;
    transition: all 500ms ease-in-out;
    background-color: $brand-color;
    @each $segment in $segments {
      .#{ map-get($segment,segmentSlug) }-l & {
        background-color: map-get($segment,segmentColor);
      }
    }
  }
}


@mixin movable-icon() {
  padding: 0 0 0 8px;
  position: relative;
  display: inline-block;
  transition: transform 250ms ease-in-out;
  font-size: .7em;
  a:hover > & {
    transform: translate(5px,0);
  }
  // Using browser hack to remove transitions for Safari only (#1244).
  _::-webkit-full-page-media, _:future, :root & {
    -webkit-transition-property: none !important;
    -webkit-transition-duration: 0 !important;
  }
}

@mixin translate-over(){
  transition: transform 250ms ease-in-out;
  a:hover > & {
    transform: translate(5px,0);
  }
  // Using browser hack to remove transitions for Safari only (#1244).
  _::-webkit-full-page-media, _:future, :root & {
    -webkit-transition-property: none !important;
    -webkit-transition-duration: 0 !important;
  }
}

@mixin updown-icon($type:horizontal) {
  //Deafult arrow down
  padding: 0 0 0 .5em;
  position: relative;
  display: inline-block;
  transition: transform 500ms ease-in-out;
  font-size: 1em;
  top: -0.1em;
  @if ($type==horizontal) {
    transform: rotate(90deg);
  }
  @if ($type==right) {
    transform: rotate(0deg);
    top: 0.1em;
  }
  //Move arrow up
  &--up{
    @if ($type==horizontal) {
      transform: rotate(-90deg)
      translate(-0.4em,0);
    }@else {
      transform: rotate(180deg)
      translate(0,-0.4em);
    }
  }
  &--left{
    transform: rotate(180deg)
    translate(0,-0.1em);
    float: left;
  }
}

@mixin section-color-font($hover: true) {
  color: $brand-color;
  &:hover,
  &:focus {
    color: $brand-over;
  }
  @each $segment in $segments {
    .#{ map-get($segment, segmentSlug) }-l & {
      color: map-get($segment, segmentColor);
      @if $hover {
        &:hover,
        &:focus {
          color: map-get($segment, segmentOver);
        }
      }
    }
  }
}

@mixin section-color-border($direction: 'all') {
  @if $direction == 'all' {
    border-color: $brand-color;
    &:hover,
    &:focus {
      border-color: $brand-over;
    }
  } @else {
    border-#{$direction}-color: $brand-color;
    &:hover,
    &:focus {
      border-#{$direction}-color: $brand-over;
    }
  }
  @each $segment in $segments {
    .#{ map-get($segment, segmentSlug) }-l & {
      @if $direction == 'all' {
        border-color: map-get($segment, segmentColor);
        &:hover,
        &:focus {
          border-color: map-get($segment, segmentOver);
        }
      } @else {
        border-#{$direction}-color: map-get($segment, segmentColor);
        &:hover,
        &:focus {
          border-#{$direction}-color: map-get($segment, segmentOver);
        }
      }
    }
  }
}

@mixin section-color-bg($palette: 'default', $hover: true) {
  background-color: $brand-color;
  @if $hover {
    &:hover,
    &:focus {
      background-color: $brand-over;
    }
  }
  @each $segment in $segments {
    .#{ map-get($segment, segmentSlug) }-l & {
      @if $palette == 'default' {
        background-color: map-get($segment, segmentColor);
      }
      @else if $palette == 'accent' {
        background-color: map-get($segment, segmentAccent);
      }
      @if $hover {
        &:hover,
        &:focus {
          @if $palette == 'default' {
            background-color: map-get($segment, segmentOver);
          }
          @else if $palette == 'accent' {
            // A consistent hover color for accent should be established as a variable.
            // This should be rewritten to include that accent hover color variable.
            background-color: darken(map-get($segment, segmentAccent), 10%);
          }
        }
      }
    }
  }
}

@mixin section-color-content {
  @content;
  @each $segment in $segments {
    .#{ map-get($segment, segmentSlug) }-l & {
      @content;
    }
  }

}

@mixin header-transition($type, $second) {
    -webkit-transition: $type $second ease;
    -moz-transition: $type $second ease;
    -o-transition: $type $second ease;
    transition: $type $second ease;
}
